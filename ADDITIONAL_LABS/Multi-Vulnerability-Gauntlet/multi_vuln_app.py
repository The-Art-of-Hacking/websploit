#!/usr/bin/env python3
"""
WebSploit Labs - Multi-Vulnerability Web Application
Created for educational purposes by Omar Santos
This application demonstrates various web security vulnerabilities
"""

from flask import Flask, request, render_template_string, jsonify, make_response, redirect, url_for, session, send_file
import sqlite3
import hashlib
import os
import subprocess
import pickle
import base64
import jwt
import xml.etree.ElementTree as ET
import urllib.parse
import json
import tempfile
import zipfile
from datetime import datetime, timedelta
from werkzeug.utils import secure_filename
import yaml

app = Flask(__name__)
app.secret_key = 'websploit-labs-insecure-secret-1234'

# Initialize database
def init_db():
    conn = sqlite3.connect('websploit.db')
    cursor = conn.cursor()
    
    # Users table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            username TEXT UNIQUE,
            password TEXT,
            email TEXT,
            role TEXT DEFAULT 'user',
            api_key TEXT
        )
    ''')
    
    # Products table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY,
            name TEXT,
            price REAL,
            description TEXT,
            category TEXT
        )
    ''')
    
    # Orders table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY,
            user_id INTEGER,
            product_id INTEGER,
            quantity INTEGER,
            total REAL,
            status TEXT
        )
    ''')
    
    # Insert default users
    cursor.execute('''
        INSERT OR IGNORE INTO users (username, password, email, role, api_key) 
        VALUES (?, ?, ?, ?, ?)
    ''', ('admin', hashlib.md5('admin123'.encode()).hexdigest(), 'admin@websploit.local', 'admin', 'admin-api-key-12345'))
    
    cursor.execute('''
        INSERT OR IGNORE INTO users (username, password, email, role, api_key) 
        VALUES (?, ?, ?, ?, ?)
    ''', ('user', hashlib.md5('password'.encode()).hexdigest(), 'user@websploit.local', 'user', 'user-api-key-67890'))
    
    # Insert sample products
    products = [
        ('Laptop', 999.99, 'High-performance laptop', 'Electronics'),
        ('Phone', 599.99, 'Latest smartphone', 'Electronics'),
        ('Book', 29.99, 'Cybersecurity handbook', 'Education')
    ]
    
    for product in products:
        cursor.execute('INSERT OR IGNORE INTO products (name, price, description, category) VALUES (?, ?, ?, ?)', product)
    
    conn.commit()
    conn.close()

# Create uploads directory
os.makedirs('uploads', exist_ok=True)
os.makedirs('backups', exist_ok=True)

# HTML template for the main page
HTML_TEMPLATE = """
<!DOCTYPE html>
<html>
<head>
    <title>WebSploit Labs - Multi-Vulnerability Platform</title>
    <meta charset="UTF-8">
    <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
        .container { max-width: 1400px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        h1 { color: #333; text-align: center; margin-bottom: 30px; }
        .nav { background: #dc3545; padding: 15px; margin: -30px -30px 30px -30px; border-radius: 10px 10px 0 0; }
        .nav a { color: white; text-decoration: none; margin-right: 20px; padding: 8px 15px; border-radius: 4px; }
        .nav a:hover { background: rgba(255,255,255,0.2); }
        .section { background: #f8f9fa; padding: 20px; margin: 20px 0; border-radius: 8px; border-left: 4px solid #dc3545; }
        .vuln-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin: 20px 0; }
        .vuln-card { background: white; padding: 20px; border-radius: 8px; border: 1px solid #ddd; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
        .vuln-card h4 { color: #dc3545; margin-top: 0; }
        input, textarea, select { width: 70%; padding: 10px; margin: 5px; border: 1px solid #ddd; border-radius: 4px; }
        button { background: #dc3545; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; margin: 5px; }
        button:hover { background: #c82333; }
        .warning { background: #fff3cd; border: 1px solid #ffeaa7; color: #856404; padding: 10px; border-radius: 4px; margin: 10px 0; }
        .result { background: #e9ecef; padding: 15px; margin-top: 10px; border-radius: 4px; max-height: 300px; overflow-y: auto; }
        .login-status { background: #d4edda; padding: 10px; border-radius: 4px; margin: 10px 0; }
    </style>
</head>
<body>
    <div class="container">
        <div class="nav">
            <a href="/">üè† Home</a>
            <a href="/login">üîê Login</a>
            <a href="/shop">üõí Shop</a>
            <a href="/upload">üìÅ Upload</a>
            <a href="/api">üîå API</a>
            <a href="/admin">‚öôÔ∏è Admin</a>
            <a href="/tools">üîß Tools</a>
        </div>
        
        <h1>üéØ WebSploit Labs - Multi-Vulnerability Platform</h1>
        <div class="warning">
            ‚ö†Ô∏è <strong>Educational Environment:</strong> This application contains multiple intentional vulnerabilities for learning purposes.
        </div>
        
        <div class="section">
            <h3>üéØ Vulnerability Categories</h3>
            <div class="vuln-grid">
                <div class="vuln-card">
                    <h4>üíâ SQL Injection</h4>
                    <p>Authentication bypass, data extraction, blind SQLi</p>
                    <small>Endpoints: /login, /shop, /api/users</small>
                </div>
                <div class="vuln-card">
                    <h4>üîì Authentication Flaws</h4>
                    <p>Weak passwords, session fixation, JWT vulnerabilities</p>
                    <small>Endpoints: /login, /api/auth</small>
                </div>
                <div class="vuln-card">
                    <h4>üìÅ File Upload Vulnerabilities</h4>
                    <p>Unrestricted uploads, path traversal, RCE</p>
                    <small>Endpoints: /upload, /backup</small>
                </div>
                <div class="vuln-card">
                    <h4>üíª Command Injection</h4>
                    <p>OS command execution, system information disclosure</p>
                    <small>Endpoints: /tools/ping, /tools/lookup</small>
                </div>
                <div class="vuln-card">
                    <h4>üîç IDOR (Insecure Direct Object Reference)</h4>
                    <p>Access unauthorized data, privilege escalation</p>
                    <small>Endpoints: /api/user/*, /order/*</small>
                </div>
                <div class="vuln-card">
                    <h4>üìÑ XXE (XML External Entity)</h4>
                    <p>XML parsing vulnerabilities, file disclosure</p>
                    <small>Endpoints: /api/xml, /import</small>
                </div>
                <div class="vuln-card">
                    <h4>üîÑ Deserialization Attacks</h4>
                    <p>Python pickle vulnerabilities, RCE</p>
                    <small>Endpoints: /api/data, /session</small>
                </div>
                <div class="vuln-card">
                    <h4>üé≠ Business Logic Flaws</h4>
                    <p>Price manipulation, workflow bypass</p>
                    <small>Endpoints: /shop/checkout, /api/purchase</small>
                </div>
            </div>
        </div>
    </div>
</body>
</html>
"""

@app.route('/')
def index():
    return HTML_TEMPLATE

# SQL Injection Vulnerabilities
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form.get('username', '')
        password = request.form.get('password', '')
        
        # VULNERABILITY 1: SQL Injection in authentication
        conn = sqlite3.connect('websploit.db')
        cursor = conn.cursor()
        
        # Vulnerable query - direct string concatenation
        query = f"SELECT * FROM users WHERE username = '{username}' AND password = '{hashlib.md5(password.encode()).hexdigest()}'"
        
        try:
            cursor.execute(query)
            user = cursor.fetchone()
            
            if user:
                session['user_id'] = user[0]
                session['username'] = user[1]
                session['role'] = user[4]
                
                return f"""
                <h2>‚úÖ Login Successful</h2>
                <p>Welcome back, {user[1]}!</p>
                <p>Role: {user[4]}</p>
                <p>Query executed: <code>{query}</code></p>
                <a href="/admin">Admin Panel</a> | <a href="/shop">Shop</a> | <a href="/">Home</a>
                """
            else:
                return f"""
                <h2>‚ùå Login Failed</h2>
                <p>Invalid credentials</p>
                <p>Query executed: <code>{query}</code></p>
                <a href="/login">Try Again</a>
                """
        except Exception as e:
            return f"""
            <h2>üí• Database Error</h2>
            <p>Error: {str(e)}</p>
            <p>Query: <code>{query}</code></p>
            <a href="/login">Try Again</a>
            """
        finally:
            conn.close()
    
    return """
    <!DOCTYPE html>
    <html>
    <head><title>Login - WebSploit Labs</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 50px; }
        .login-form { max-width: 400px; margin: 0 auto; padding: 30px; border: 1px solid #ddd; border-radius: 8px; }
        input { width: 100%; padding: 10px; margin: 10px 0; border: 1px solid #ddd; border-radius: 4px; }
        button { width: 100%; background: #007bff; color: white; padding: 12px; border: none; border-radius: 4px; cursor: pointer; }
        .hint { background: #f8f9fa; padding: 15px; margin: 20px 0; border-radius: 4px; font-size: 0.9em; }
    </style>
    </head>
    <body>
        <div class="login-form">
            <h2>üîê User Login</h2>
            <form method="POST">
                <input type="text" name="username" placeholder="Username" required>
                <input type="password" name="password" placeholder="Password" required>
                <button type="submit">Login</button>
            </form>
            
            <div class="hint">
                <strong>üí° Testing Hints:</strong><br>
                ‚Ä¢ Valid users: admin/admin123, user/password<br>
                ‚Ä¢ Try SQL injection payloads in username field<br>
                ‚Ä¢ Test authentication bypass techniques
            </div>
        </div>
        <p><a href="/">‚Üê Back to Home</a></p>
    </body>
    </html>
    """

@app.route('/shop')
def shop():
    category = request.args.get('category', '')
    search = request.args.get('search', '')
    
    # VULNERABILITY 2: SQL Injection in search/filter
    conn = sqlite3.connect('websploit.db')
    cursor = conn.cursor()
    
    base_query = "SELECT * FROM products WHERE 1=1"
    
    if category:
        # Vulnerable: Direct string concatenation
        base_query += f" AND category = '{category}'"
    
    if search:
        # Vulnerable: Direct string concatenation
        base_query += f" AND (name LIKE '%{search}%' OR description LIKE '%{search}%')"
    
    try:
        cursor.execute(base_query)
        products = cursor.fetchall()
        
        shop_html = f"""
        <!DOCTYPE html>
        <html>
        <head><title>Shop - WebSploit Labs</title>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 20px; }}
            .search-form {{ background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px; }}
            .product {{ background: white; padding: 15px; margin: 10px 0; border: 1px solid #ddd; border-radius: 8px; }}
            .debug {{ background: #fff3cd; padding: 10px; margin: 10px 0; border-radius: 4px; font-family: monospace; }}
            input {{ padding: 8px; margin: 5px; border: 1px solid #ddd; border-radius: 4px; }}
            button {{ background: #28a745; color: white; padding: 8px 16px; border: none; border-radius: 4px; cursor: pointer; }}
        </style>
        </head>
        <body>
            <h2>üõí WebSploit Shop</h2>
            
            <div class="search-form">
                <form method="GET">
                    <input type="text" name="search" value="{search}" placeholder="Search products...">
                    <select name="category">
                        <option value="">All Categories</option>
                        <option value="Electronics" {'selected' if category == 'Electronics' else ''}>Electronics</option>
                        <option value="Education" {'selected' if category == 'Education' else ''}>Education</option>
                    </select>
                    <button type="submit">Search</button>
                </form>
            </div>
            
            <div class="debug">
                <strong>Debug Query:</strong> {base_query}
            </div>
            
            <div class="products">
        """
        
        for product in products:
            shop_html += f"""
                <div class="product">
                    <h4>{product[1]}</h4>
                    <p>Price: ${product[2]}</p>
                    <p>{product[3]}</p>
                    <p>Category: {product[4]}</p>
                    <a href="/order/{product[0]}">Order Now</a>
                </div>
            """
        
        if not products:
            shop_html += '<p>No products found matching your criteria.</p>'
        
        shop_html += """
            </div>
            <p><a href="/">‚Üê Back to Home</a></p>
        </body>
        </html>
        """
        
        return shop_html
        
    except Exception as e:
        return f"""
        <h2>üí• Database Error</h2>
        <p>Error: {str(e)}</p>
        <p>Query: <code>{base_query}</code></p>
        <a href="/shop">Try Again</a>
        """
    finally:
        conn.close()

# IDOR (Insecure Direct Object Reference) Vulnerabilities
@app.route('/order/<int:product_id>')
def view_order(product_id):
    # VULNERABILITY 3: IDOR - Access any product/order without authorization
    conn = sqlite3.connect('websploit.db')
    cursor = conn.cursor()
    
    cursor.execute("SELECT * FROM products WHERE id = ?", (product_id,))
    product = cursor.fetchone()
    
    cursor.execute("SELECT * FROM orders WHERE product_id = ?", (product_id,))
    orders = cursor.fetchall()
    
    conn.close()
    
    if not product:
        return "Product not found", 404
    
    return f"""
    <!DOCTYPE html>
    <html>
    <head><title>Order Details - Product {product_id}</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 20px; }}
        .order-info {{ background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0; }}
        .order {{ background: white; padding: 15px; margin: 10px 0; border: 1px solid #ddd; border-radius: 8px; }}
        .sensitive {{ background: #fff3cd; padding: 10px; border-radius: 4px; margin: 10px 0; }}
    </style>
    </head>
    <body>
        <h2>üìã Order Details - Product {product_id}</h2>
        
        <div class="order-info">
            <h3>{product[1]}</h3>
            <p>Price: ${product[2]}</p>
            <p>Description: {product[3]}</p>
        </div>
        
        <div class="sensitive">
            <h4>‚ö†Ô∏è Internal Order Information (IDOR Vulnerability)</h4>
            <p>You can access order details for any product by changing the ID in the URL</p>
            <p>Try: /order/1, /order/2, /order/3</p>
        </div>
        
        <h3>Recent Orders for this Product:</h3>
    """ + ''.join([f'<div class="order">Order ID: {order[0]}, User ID: {order[1]}, Quantity: {order[3]}, Total: ${order[4]}</div>' for order in orders]) + """
        
        <p><a href="/shop">‚Üê Back to Shop</a></p>
    </body>
    </html>
    """

# Command Injection Vulnerabilities
@app.route('/tools')
def tools():
    return """
    <!DOCTYPE html>
    <html>
    <head><title>Network Tools - WebSploit Labs</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .tool { background: #f8f9fa; padding: 20px; margin: 20px 0; border-radius: 8px; border-left: 4px solid #007bff; }
        input { padding: 10px; width: 300px; border: 1px solid #ddd; border-radius: 4px; margin: 5px; }
        button { background: #007bff; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; }
        .result { background: #e9ecef; padding: 15px; margin: 10px 0; border-radius: 4px; font-family: monospace; white-space: pre-wrap; }
    </style>
    </head>
    <body>
        <h2>üîß Network Diagnostic Tools</h2>
        
        <div class="tool">
            <h3>üèì Ping Tool</h3>
            <form method="POST" action="/tools/ping">
                <input type="text" name="host" placeholder="Enter hostname or IP" required>
                <input type="number" name="count" value="4" min="1" max="10" placeholder="Ping count">
                <button type="submit">Ping</button>
            </form>
        </div>
        
        <div class="tool">
            <h3>üîç DNS Lookup</h3>
            <form method="POST" action="/tools/lookup">
                <input type="text" name="domain" placeholder="Enter domain name" required>
                <select name="type">
                    <option value="A">A Record</option>
                    <option value="MX">MX Record</option>
                    <option value="NS">NS Record</option>
                </select>
                <button type="submit">Lookup</button>
            </form>
        </div>
        
        <div class="tool">
            <h3>üìä System Info</h3>
            <form method="POST" action="/tools/sysinfo">
                <select name="info_type">
                    <option value="uptime">System Uptime</option>
                    <option value="users">Active Users</option>
                    <option value="processes">Running Processes</option>
                </select>
                <button type="submit">Get Info</button>
            </form>
        </div>
        
        <p><a href="/">‚Üê Back to Home</a></p>
    </body>
    </html>
    """

@app.route('/tools/ping', methods=['POST'])
def ping_tool():
    host = request.form.get('host', '')
    count = request.form.get('count', '4')
    
    if not host:
        return "Host parameter required", 400
    
    # VULNERABILITY 4: Command Injection
    try:
        # Vulnerable: Direct command construction
        command = f"ping -c {count} {host}"
        result = subprocess.run(command, shell=True, capture_output=True, text=True, timeout=30)
        
        return f"""
        <h2>üèì Ping Results</h2>
        <p><strong>Command executed:</strong> <code>{command}</code></p>
        <div class="result">{result.stdout}</div>
        {f'<div class="result" style="color: red;">{result.stderr}</div>' if result.stderr else ''}
        <p><a href="/tools">‚Üê Back to Tools</a></p>
        """
    except subprocess.TimeoutExpired:
        return "Command timed out", 500
    except Exception as e:
        return f"Error executing command: {str(e)}", 500

@app.route('/tools/lookup', methods=['POST'])
def dns_lookup():
    domain = request.form.get('domain', '')
    record_type = request.form.get('type', 'A')
    
    if not domain:
        return "Domain parameter required", 400
    
    # VULNERABILITY 5: Command Injection with multiple parameters
    try:
        # Vulnerable: Direct command construction with user input
        command = f"nslookup -type={record_type} {domain}"
        result = subprocess.run(command, shell=True, capture_output=True, text=True, timeout=15)
        
        return f"""
        <h2>üîç DNS Lookup Results</h2>
        <p><strong>Command executed:</strong> <code>{command}</code></p>
        <div class="result">{result.stdout}</div>
        {f'<div class="result" style="color: red;">{result.stderr}</div>' if result.stderr else ''}
        <p><a href="/tools">‚Üê Back to Tools</a></p>
        """
    except Exception as e:
        return f"Error executing lookup: {str(e)}", 500

@app.route('/tools/sysinfo', methods=['POST'])
def system_info():
    info_type = request.form.get('info_type', 'uptime')
    
    # VULNERABILITY 6: Command Injection through parameter selection
    commands = {
        'uptime': 'uptime',
        'users': 'who',
        'processes': 'ps aux | head -20'
    }
    
    if info_type not in commands:
        return "Invalid info type", 400
    
    try:
        # Vulnerable: If user can manipulate info_type parameter
        command = commands[info_type]
        result = subprocess.run(command, shell=True, capture_output=True, text=True, timeout=10)
        
        return f"""
        <h2>üìä System Information</h2>
        <p><strong>Command executed:</strong> <code>{command}</code></p>
        <div class="result">{result.stdout}</div>
        <p><a href="/tools">‚Üê Back to Tools</a></p>
        """
    except Exception as e:
        return f"Error getting system info: {str(e)}", 500

# File Upload Vulnerabilities
@app.route('/upload', methods=['GET', 'POST'])
def upload_file():
    if request.method == 'POST':
        if 'file' not in request.files:
            return "No file selected", 400
        
        file = request.files['file']
        if file.filename == '':
            return "No file selected", 400
        
        # VULNERABILITY 7: Unrestricted file upload
        filename = file.filename  # No sanitization
        filepath = os.path.join('uploads', filename)
        
        try:
            file.save(filepath)
            file_size = os.path.getsize(filepath)
            
            # Read file content for display (dangerous!)
            try:
                with open(filepath, 'r', encoding='utf-8', errors='ignore') as f:
                    content_preview = f.read(500)
            except:
                content_preview = "Binary file or unreadable content"
            
            return f"""
            <h2>‚úÖ File Upload Successful</h2>
            <p><strong>Filename:</strong> {filename}</p>
            <p><strong>File path:</strong> {filepath}</p>
            <p><strong>File size:</strong> {file_size} bytes</p>
            <p><strong>Content preview:</strong></p>
            <div class="result">{content_preview}</div>
            <p><a href="/uploads/{filename}">View uploaded file</a></p>
            <p><a href="/upload">Upload another file</a></p>
            """
        except Exception as e:
            return f"Upload failed: {str(e)}", 500
    
    return """
    <!DOCTYPE html>
    <html>
    <head><title>File Upload - WebSploit Labs</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .upload-form { max-width: 500px; margin: 0 auto; padding: 30px; border: 1px solid #ddd; border-radius: 8px; }
        input[type="file"] { width: 100%; padding: 10px; margin: 10px 0; border: 1px solid #ddd; border-radius: 4px; }
        button { width: 100%; background: #28a745; color: white; padding: 12px; border: none; border-radius: 4px; cursor: pointer; }
        .warning { background: #fff3cd; padding: 15px; margin: 20px 0; border-radius: 4px; }
    </style>
    </head>
    <body>
        <div class="upload-form">
            <h2>üìÅ File Upload Service</h2>
            <form method="POST" enctype="multipart/form-data">
                <input type="file" name="file" required>
                <button type="submit">Upload File</button>
            </form>
            
            <div class="warning">
                <strong>‚ö†Ô∏è Security Notice:</strong><br>
                This upload service has intentional vulnerabilities for educational purposes.<br>
                Try uploading different file types including scripts and executables.
            </div>
        </div>
        <p><a href="/">‚Üê Back to Home</a></p>
    </body>
    </html>
    """

@app.route('/uploads/<filename>')
def uploaded_file(filename):
    # VULNERABILITY 8: Path traversal
    try:
        # Dangerous: No path validation
        filepath = os.path.join('uploads', filename)
        return send_file(filepath)
    except Exception as e:
        return f"File not found: {str(e)}", 404

# XXE (XML External Entity) Vulnerabilities
@app.route('/api/xml', methods=['GET', 'POST'])
def xml_processor():
    if request.method == 'POST':
        xml_data = request.get_data(as_text=True)
        
        if not xml_data:
            return jsonify({'error': 'No XML data provided'}), 400
        
        # VULNERABILITY 9: XXE through XML parsing
        try:
            # Vulnerable XML parser - allows external entities
            root = ET.fromstring(xml_data)
            
            # Process XML and return data
            result = {
                'tag': root.tag,
                'text': root.text,
                'attributes': root.attrib,
                'children': []
            }
            
            for child in root:
                result['children'].append({
                    'tag': child.tag,
                    'text': child.text,
                    'attributes': child.attrib
                })
            
            return jsonify({'success': True, 'parsed_data': result})
            
        except ET.ParseError as e:
            return jsonify({'error': f'XML parsing error: {str(e)}'}), 400
        except Exception as e:
            return jsonify({'error': f'Processing error: {str(e)}'}), 500
    
    return """
    <!DOCTYPE html>
    <html>
    <head><title>XML Processor - WebSploit Labs</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .xml-form { max-width: 800px; margin: 0 auto; }
        textarea { width: 100%; height: 200px; padding: 10px; border: 1px solid #ddd; border-radius: 4px; font-family: monospace; }
        button { background: #007bff; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; }
        .example { background: #f8f9fa; padding: 15px; margin: 15px 0; border-radius: 4px; }
        .result { background: #e9ecef; padding: 15px; margin: 15px 0; border-radius: 4px; }
    </style>
    </head>
    <body>
        <div class="xml-form">
            <h2>üîó XML Data Processor</h2>
            
            <form method="POST">
                <textarea name="xml_data" placeholder="Enter XML data to process..."><?xml version="1.0" encoding="UTF-8"?>
<user>
    <name>Test User</name>
    <email>test@example.com</email>
    <role>user</role>
</user></textarea>
                <br>
                <button type="submit">Process XML</button>
            </form>
            
            <div class="example">
                <h4>üí° XXE Testing Examples:</h4>
                <p><strong>Basic XXE payload:</strong></p>
                <pre>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE foo [ &lt;!ENTITY xxe SYSTEM "file:///etc/passwd"&gt; ]&gt;
&lt;user&gt;&lt;name&gt;&amp;xxe;&lt;/name&gt;&lt;/user&gt;</pre>
                
                <p><strong>Internal network scanning:</strong></p>
                <pre>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE foo [ &lt;!ENTITY xxe SYSTEM "http://127.0.0.1:22"&gt; ]&gt;
&lt;user&gt;&lt;name&gt;&amp;xxe;&lt;/name&gt;&lt;/user&gt;</pre>
            </div>
        </div>
        <p><a href="/">‚Üê Back to Home</a></p>
    </body>
    </html>
    """

# Deserialization Vulnerabilities
@app.route('/api/data', methods=['GET', 'POST'])
def data_processor():
    if request.method == 'POST':
        data = request.form.get('data', '')
        
        if not data:
            return jsonify({'error': 'No data provided'}), 400
        
        # VULNERABILITY 10: Insecure deserialization
        try:
            # Vulnerable: Direct pickle deserialization
            decoded_data = base64.b64decode(data)
            obj = pickle.loads(decoded_data)
            
            return jsonify({
                'success': True,
                'deserialized_object': str(obj),
                'object_type': str(type(obj))
            })
            
        except Exception as e:
            return jsonify({'error': f'Deserialization error: {str(e)}'}), 500
    
    # Demonstrate safe serialization for comparison
    sample_data = {'username': 'demo', 'role': 'user', 'timestamp': str(datetime.now())}
    serialized_sample = base64.b64encode(pickle.dumps(sample_data)).decode()
    
    return f"""
    <!DOCTYPE html>
    <html>
    <head><title>Data Processor - WebSploit Labs</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 20px; }}
        .data-form {{ max-width: 800px; margin: 0 auto; }}
        textarea {{ width: 100%; height: 150px; padding: 10px; border: 1px solid #ddd; border-radius: 4px; font-family: monospace; }}
        button {{ background: #17a2b8; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; }}
        .example {{ background: #f8f9fa; padding: 15px; margin: 15px 0; border-radius: 4px; }}
        .warning {{ background: #f8d7da; border: 1px solid #f5c6cb; color: #721c24; padding: 15px; border-radius: 4px; margin: 15px 0; }}
    </style>
    </head>
    <body>
        <div class="data-form">
            <h2>üì¶ Data Deserialization Service</h2>
            
            <form method="POST">
                <h4>Enter Base64-encoded pickled data:</h4>
                <textarea name="data" placeholder="Base64-encoded Python pickle data...">{serialized_sample}</textarea>
                <br>
                <button type="submit">Deserialize Data</button>
            </form>
            
            <div class="warning">
                <h4>‚ö†Ô∏è Deserialization Vulnerability</h4>
                <p>This endpoint deserializes Python pickle data without validation, which can lead to remote code execution.</p>
            </div>
            
            <div class="example">
                <h4>üí° Testing Examples:</h4>
                <p><strong>Sample safe data (above):</strong> Contains user information</p>
                <p><strong>Malicious payload example:</strong></p>
                <pre>import pickle, base64, os
# Create malicious payload
class RCE:
    def __reduce__(self):
        return (os.system, ('echo "RCE via pickle deserialization"',))

payload = base64.b64encode(pickle.dumps(RCE())).decode()
print(payload)</pre>
            </div>
        </div>
        <p><a href="/">‚Üê Back to Home</a></p>
    </body>
    </html>
    """

# JWT Vulnerabilities
@app.route('/api/auth', methods=['POST'])
def jwt_auth():
    username = request.json.get('username', '') if request.is_json else request.form.get('username', '')
    password = request.json.get('password', '') if request.is_json else request.form.get('password', '')
    
    # Simple authentication (for demo)
    if username == 'admin' and password == 'admin123':
        # VULNERABILITY 11: Weak JWT secret
        payload = {
            'username': username,
            'role': 'admin',
            'exp': datetime.utcnow() + timedelta(hours=24)
        }
        
        # Vulnerable: Weak secret key
        token = jwt.encode(payload, 'secret', algorithm='HS256')
        
        return jsonify({
            'success': True,
            'token': token,
            'message': 'Authentication successful'
        })
    elif username == 'user' and password == 'password':
        payload = {
            'username': username,
            'role': 'user',
            'exp': datetime.utcnow() + timedelta(hours=24)
        }
        
        token = jwt.encode(payload, 'secret', algorithm='HS256')
        
        return jsonify({
            'success': True,
            'token': token,
            'message': 'Authentication successful'
        })
    else:
        return jsonify({'error': 'Invalid credentials'}), 401

@app.route('/api/protected')
def protected_endpoint():
    auth_header = request.headers.get('Authorization', '')
    
    if not auth_header.startswith('Bearer '):
        return jsonify({'error': 'Missing or invalid authorization header'}), 401
    
    token = auth_header.split(' ')[1]
    
    try:
        # VULNERABILITY 12: JWT algorithm confusion attack possible
        # Vulnerable: No algorithm verification
        payload = jwt.decode(token, 'secret', algorithms=['HS256', 'none'])
        
        return jsonify({
            'success': True,
            'user_data': payload,
            'message': 'Access granted to protected resource'
        })
    except jwt.ExpiredSignatureError:
        return jsonify({'error': 'Token expired'}), 401
    except jwt.InvalidTokenError:
        return jsonify({'error': 'Invalid token'}), 401

# Business Logic Vulnerabilities
@app.route('/api/purchase', methods=['POST'])
def purchase_item():
    product_id = request.json.get('product_id') if request.is_json else request.form.get('product_id')
    quantity = request.json.get('quantity', 1) if request.is_json else int(request.form.get('quantity', 1))
    price = request.json.get('price') if request.is_json else float(request.form.get('price', 0))
    
    # VULNERABILITY 13: Price manipulation - trusting client-side price
    if not all([product_id, quantity, price]):
        return jsonify({'error': 'Missing required parameters'}), 400
    
    # Business logic flaw: Not validating price against database
    total = price * quantity
    
    # Simulate order creation
    order_id = f"ORD-{datetime.now().strftime('%Y%m%d')}-{product_id}"
    
    return jsonify({
        'success': True,
        'order_id': order_id,
        'product_id': product_id,
        'quantity': quantity,
        'unit_price': price,
        'total_amount': total,
        'message': f'Order created successfully for ${total}'
    })

# YAML Deserialization (Additional vulnerability)
@app.route('/api/config', methods=['POST'])
def config_processor():
    config_data = request.get_data(as_text=True)
    
    if not config_data:
        return jsonify({'error': 'No configuration data provided'}), 400
    
    # VULNERABILITY 14: YAML deserialization
    try:
        # Vulnerable: Using unsafe YAML loader
        config = yaml.load(config_data, Loader=yaml.Loader)
        
        return jsonify({
            'success': True,
            'parsed_config': config,
            'message': 'Configuration processed successfully'
        })
    except Exception as e:
        return jsonify({'error': f'YAML processing error: {str(e)}'}), 500

# Admin panel with multiple vulnerabilities
@app.route('/admin')
def admin_panel():
    user_id = request.args.get('user_id', '1')
    debug = request.args.get('debug', '')
    
    # VULNERABILITY 15: IDOR in admin panel
    conn = sqlite3.connect('websploit.db')
    cursor = conn.cursor()
    
    # Vulnerable: No authorization check and IDOR
    cursor.execute(f"SELECT * FROM users WHERE id = {user_id}")
    user_data = cursor.fetchone()
    
    cursor.execute("SELECT * FROM users")
    all_users = cursor.fetchall()
    
    conn.close()
    
    admin_html = f"""
    <!DOCTYPE html>
    <html>
    <head><title>Admin Panel - WebSploit Labs</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 20px; }}
        .admin-header {{ background: #dc3545; color: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; }}
        .user-detail {{ background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0; }}
        .users-list {{ background: white; padding: 20px; border-radius: 8px; }}
        table {{ width: 100%; border-collapse: collapse; }}
        th, td {{ padding: 10px; text-align: left; border-bottom: 1px solid #ddd; }}
        th {{ background-color: #f8f9fa; }}
        .debug {{ background: #fff3cd; padding: 15px; margin: 15px 0; border-radius: 4px; font-family: monospace; }}
        .vuln-notice {{ background: #f8d7da; border: 1px solid #f5c6cb; color: #721c24; padding: 15px; border-radius: 4px; margin: 15px 0; }}
    </style>
    </head>
    <body>
        <div class="admin-header">
            <h1>‚öôÔ∏è Admin Control Panel</h1>
            <p>System Administration Interface</p>
        </div>
        
        <div class="vuln-notice">
            <h4>üö® Vulnerability Notice</h4>
            <p>This admin panel demonstrates multiple security flaws:</p>
            <ul>
                <li>No authentication required</li>
                <li>IDOR vulnerability (change user_id parameter)</li>
                <li>SQL injection in user lookup</li>
                <li>Sensitive information disclosure</li>
            </ul>
        </div>
        
        <div class="user-detail">
            <h3>üë§ User Details (ID: {user_id})</h3>
    """
    
    if user_data:
        admin_html += f"""
            <p><strong>Username:</strong> {user_data[1]}</p>
            <p><strong>Email:</strong> {user_data[3]}</p>
            <p><strong>Role:</strong> {user_data[4]}</p>
            <p><strong>Password Hash:</strong> {user_data[2]}</p>
            <p><strong>API Key:</strong> {user_data[5]}</p>
        """
    else:
        admin_html += '<p>User not found.</p>'
    
    admin_html += """
        </div>
        
        <div class="users-list">
            <h3>üë• All Users</h3>
            <table>
                <tr>
                    <th>ID</th>
                    <th>Username</th>
                    <th>Email</th>
                    <th>Role</th>
                    <th>Actions</th>
                </tr>
    """
    
    for user in all_users:
        admin_html += f"""
                <tr>
                    <td>{user[0]}</td>
                    <td>{user[1]}</td>
                    <td>{user[3]}</td>
                    <td>{user[4]}</td>
                    <td><a href="/admin?user_id={user[0]}">View Details</a></td>
                </tr>
        """
    
    admin_html += """
            </table>
        </div>
    """
    
    if debug:
        admin_html += f"""
        <div class="debug">
            <h4>üêõ Debug Information</h4>
            <p>Debug mode enabled with parameter: {debug}</p>
            <p>This could be used for additional information disclosure or XSS attacks.</p>
        </div>
        """
    
    admin_html += """
        <p><a href="/">‚Üê Back to Home</a></p>
    </body>
    </html>
    """
    
    return admin_html

# API endpoint with multiple vulnerabilities
@app.route('/api/users/<int:user_id>')
def api_get_user(user_id):
    # VULNERABILITY 16: API IDOR and information disclosure
    conn = sqlite3.connect('websploit.db')
    cursor = conn.cursor()
    
    cursor.execute("SELECT * FROM users WHERE id = ?", (user_id,))
    user = cursor.fetchone()
    
    conn.close()
    
    if not user:
        return jsonify({'error': 'User not found'}), 404
    
    # Vulnerable: Returning sensitive information without authorization
    return jsonify({
        'id': user[0],
        'username': user[1],
        'password_hash': user[2],  # Should never be exposed
        'email': user[3],
        'role': user[4],
        'api_key': user[5]  # Sensitive information
    })

# Session management vulnerabilities
@app.route('/session/data')
def session_data():
    # VULNERABILITY 17: Session data exposure
    session_info = {
        'session_id': request.cookies.get('session', 'not_set'),
        'user_data': dict(session),
        'headers': dict(request.headers),
        'remote_addr': request.remote_addr,
        'user_agent': request.user_agent.string
    }
    
    return jsonify(session_info)

if __name__ == '__main__':
    init_db()
    print("üöÄ WebSploit Labs - Multi-Vulnerability Application")
    print("‚ö†Ô∏è  WARNING: This application contains multiple intentional vulnerabilities!")
    print("üìö Educational use only - Created by Omar Santos")
    print("üåê Access the application at: http://localhost:5010")
    print("=" * 60)
    print("üéØ Vulnerability Categories Available:")
    print("   ‚Ä¢ SQL Injection: /login, /shop")
    print("   ‚Ä¢ Command Injection: /tools/*")
    print("   ‚Ä¢ File Upload: /upload")
    print("   ‚Ä¢ IDOR: /order/*, /admin, /api/users/*")
    print("   ‚Ä¢ XXE: /api/xml")
    print("   ‚Ä¢ Deserialization: /api/data")
    print("   ‚Ä¢ JWT Issues: /api/auth, /api/protected")
    print("   ‚Ä¢ Business Logic: /api/purchase")
    print("   ‚Ä¢ YAML Deserialization: /api/config")
    print("=" * 60)
    
    app.run(host='0.0.0.0', port=5010, debug=True)